## 线程调度

### 调度算法分类

1.抢占式

在抢占式系统中，一个线程被选中在处理器上运行以后，允许运行的时间长度有最大限制，一旦达到了这么长时间，就将被迫放弃执行权，交由系统挑选其他的线程来运行，或者若找不到其他的线程，则再把执行权交还给它，让它继续运行。抢占式调度算法需要一个**时钟中断**来获得对处理器的控制权，而非抢占式算法并不需要时钟中断。

2.非抢占式

非抢占式系统中，一个线程一旦被选择在处理器上运行，就将一直运行下去，直到阻塞（比如等待I/O 或等待一个信号量）或者自愿放弃或退出。在这类算法中，如果一个线程陷入一个长时间处理甚至无限循环的过程之中，则系统就将无法再运行其他的线程，从而整个系统可能会挂起，因此系统必须有相应的机制来打破这种可能的停滞。

三种典型的线程调度算法：

(1) **先到先服务算法**。在非抢占式系统中，这一算法比较自然，简单来讲，用一个FIFO（先进先出）队列就可以满足要求。所有的线程构成一个队列，最先进入队列的线程获得处理器执行权，等到放弃处理器执行权时，又回到队列尾部，下一个线程继续执行。若有新的线程进来，则添加到队列尾部。此算法简单，易于实现，但是，如果每个线程执行的任务单元所需要的时间长短不一的话，则算法的实际效果可能非常不公平。

**问题**：难以适用于下城任务单元长短不一的情况，导致"饿死“情况

(2) **时间片轮转**调度算法。顾名思义，处理器的时间被分成了最大长度不超过某个值的时间片段，称为时间片，然后，用轮转方法分配给每一个线程。当一个线程获得了处理器执行权以后，按照自身的逻辑执行下去，直到时间片用完，或者自己主动放弃执行权（比如要等待一个信号量）。系统在获得了处理器控制权以后，用轮转方法找到下一个正在等待运行的线程，让它继续执行。这种线程调度方法实现简单，所有满足运行条件的线程排成一个队列，然后按照时间片的间隔，轮流让每一个线程获得处理器执行权。由于时钟中断每次都要打断一个线程的运行，所以，这种做法存在固有的线程切换开销，而时间片长短的选择会影响到线程切换开销所占的比例。在现代操作系统中，时间片通常设置为几毫秒到几十、上百毫秒。由于现代计算机的指令周期越来越短，线程切换开销（通常几百条指令或几千条指令，取决于算法实现的复杂程度）也在减小。这种算法使用很广泛，它不仅简单，也确实能公平地分配处理器资源。

**问题**：线程切换开销

(3) **优先级调度**算法。在时间片轮转算法中，一个基本的假设是所有的线程都同等重要。这一假设在专用计算机上可能是非常合理的，但是，在现代多用途的计算机上，可能难以胜任多种不同类型的应用程序并发执行的实际情形。优先级调度算法是这种算法的一个改进，其基本思路是，每个线程都有一个优先级值，高优先级的线程总是优先被考虑在处理器上执行。操作系统在管理线程时，**可以使用一个优先级队列，或者每一个优先级用一个队列来存放所有满足执行条件的线程**，这样，当一个线程用完了它的时间片或者自动放弃处理器执行权时，系统选择**优先级最高的线程**作为下一个要运行的线程。每一个线程在队列中的位置是由它的优先级来决定的。同等优先级的线程使用轮转或先到先执行的策略。

**问题**：高优先级线程霸占CPU，导致饿死情况。所以，一些变种的优先级算法考虑引入动态优先级，即每个线程有静态的优先级和动态的优先级。所谓动态的优先级是在静态优先级的基础上根据某些特定的条件提升或降低线程的优先级，系统调度器根据线程的动态优先级来安排它们的执行顺序。例如，连续执行了多个时间片的线程可能要降低优先级，而长时间没有得到时间片的低优先级线程可能会得到优先级提升。

Windows 的调度算法是一个**抢占式的、支持多处理器的优先级调度**算法，它为每个处理器定义了一个链表数组，相同优先级的线程挂在同一个链表中，不同优先级的线程分别属于不同的链表。当一个线程满足了执行条件时，它首先被挂到当前处理器的一个待分配的链表（称为延迟的就绪链表）中，然后调度器会在适当的时候（当它获得了控制权时）把待分配链表上的线程分配到某个处理器的对应优先级的线程链表中。当这个处理器在选择下一个要运行的线程时，会根据优先级准则选择此线程（如果没有同等或更高优先级的线程也在等待运行的话）。Windows 中线程的优先级调整考虑到了很多因素，例如前台线程、等待I/O 完成后的线程也有轻微的优先级提升，这是一些来自实践经验的设计细节，它们使得Windows 操作系统对于交互式应用程序有更好的性能表现。

### 线程切换

线程的**上下文**是指由用户地址空间的内容、硬件寄存器的内容以及与该线程有关的**内核数据结构组成**的。更加严格的讲，线程的上下文是由它的**用户级上下文**、**寄存器上下文**以及**系统级上下文**组成。

如何**恢复**上下文呢：程序计数器。这就是为什么java虚拟机中每一个线程都私有一个**程序计数器**的原因。因为下次恢复时需要知道在这之前当前线程已经执行到哪条指令了，所以需要记录程序计数器的值，另外比如说线程正在进行某个计算的时候被挂起了，那么下次继续执行的时候需要知道之前挂起时变量的值时多少，因此需要记录CPU寄存器的状态。所以一般来说，线程上下文切换过程中会记录**程序计数器**、**CPU寄存器状态**等数据。

## 缺页中断

在**请求分页系统**中，每当所要訪问的页面**不在内存**时，便产生一缺页中断，请求OS将所缺之页调入内存。缺页中断作为中断，它们相同须要经历诸如**保护CPU环境、分析中断原因、转入缺页中断处理程序进行处理、恢复CPU环境**等几个步骤。缺页中断是一种**特殊**的中断，普通中断都是在CPU执行完一条指令后响应，而**缺页中断**则是在**指令运行期间**发现所需数据不在内存时处理得。

**原理**：局部性原理。很多数据访问都具有**一次性**，部分数据却被**大量频繁**访问。

**虚拟存储器**是指具有请求调入功能和置换功能，能从**逻辑**上对内存容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其执行速度接近于内存速度，而每位的成本却又接近于外存。可见，虚拟存储技术是一种性能很优越的存储器管理技术，故被广泛地应用于大、中、小型机器和微型机中。

![1541903232593](C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\1541903232593.png)

**页表**：指出逻辑地址中的页号与所占主存物理块号的对应关系。

**快表：**快表就是存放在**高速缓冲存储器**的部分页表。作为页表的Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时CPU要访问**两次主存**。有了快表，有时只要**访问一次**高速缓冲存储器，**一次主存**，这样可加速查找并提高指令执行速度。用来保存那些**当前访问过的页表项**。从而，读页表项时，不需要再访存了，而是直接从**寄存器**中读取。

**那现在给定一个逻辑地址，怎么知道其物理地址呢？**

①将【12-31】位的页号与 页表的长度比较。页号不能大于页表长度，否则越界。

②根据**页号** 找到 该页号所在的页表项，即该页号对应着哪个页表项。因为，页表项里面就存放着物理地址。

那如何查找页表项呢？将页号乘以**页表项**的长度（每个页表项，其实就是一个逻辑的页 到 物理页 的映射信息），就知道了该逻辑页对应着哪个页表项(根据页号匹配页表项一般是由硬件完成的)

然后，正如前面提到，页表也是保存在内存中的，故需要页表的内存始址（这是也为什么地址变换机构 保存 页表在内存的起始地址的原因），将页表始址 与 上面的乘积相加，就得到了该逻辑页对应的**页表项的物理地址**。读这个页表项的物理地址中的内容，就知道了该逻辑页对应的**物理块地址**（物理地址）。从而，就完成了逻辑地址到物理地址的转换。

从上面可以看出，**CPU每存取一个数据时，需要两次访问主存。一次是访问页表项的物理地址，得到了数据的物理块地址。第二次拿着物理块地址去取数据。**

### 页面置换算法：

**LRU**:置换最近一段时间以来最长时间未访问过的页面。根据**程序局部性原理**，刚被访问的页面，可能马上又要被访问；而较长时间内没有被访问的页面，可能最近不会被访问。 

　　LRU算法普偏地适用于各种类型的程序，但是系统要时时刻刻对各页的访问历史情况加以记录和更新，开销太大，因此LRU算法必须要有硬件的支持。

**FIFO**:

**OPT:**最优置换（Optimal Replacement）是在理论上提出的一种算法。其实质是：当调入新的一页而必须预先置换某个老页时，所选择的老页应是**将来不再被使用**，或者是在**最远的将来**才被访问。采用这种页面置换算法，保证有最少的缺页率。
但是最优页面置换算法的实现是困难的，因为它需要人们**预先就知道一个进程整个运行过程中页面走向的全部情况**。不过，这个算法可用来**衡量（如通过模拟实验分析或理论分析）其他算法的优劣**。